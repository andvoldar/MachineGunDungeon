using UnityEngine;
using UnityEngine.Events;

public class PlayerInvulnerabilityHandler : MonoBehaviour
{
    [SerializeField] private PlayerHealthHandler healthHandler;
    //[SerializeField] private bool showInvulnerabilityFeedback = true;
    [SerializeField] private FeedbackPlayer feedbackPlayer;
    //[SerializeField] private string invulnerableFeedbackKey = "Invulnerable";

    public bool IsInvulnerable { get; private set; }

    private void Awake()
    {
        if (healthHandler == null)
            healthHandler = GetComponent<PlayerHealthHandler>();
    }

    public void ActivateInvulnerability()
    {
        if (IsInvulnerable) return;

        IsInvulnerable = true;
        healthHandler.SetInvulnerable(true);

    }

    public void DeactivateInvulnerability()
    {
        if (!IsInvulnerable) return;

        IsInvulnerable = false;
        healthHandler.SetInvulnerable(false);
    }

    public void ActivateForDuration(float duration)
    {
        ActivateInvulnerability();
        CancelInvoke(nameof(DeactivateInvulnerability)); // Previene múltiples invokes
        Invoke(nameof(DeactivateInvulnerability), duration);
    }
}
